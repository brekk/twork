import IO from "IO"
import List from "List"
import String from "String"

import CopyEdit from "CopyEdit"

import { Person } from "@/Person"
import P from "@/Place"
import R from "@/Relationship"
import Tag from "@/Tag"



main = () => {
  brekk = Person("brekk")
  angelo = Person("angelo")
  brian = Person("brian")

  rls = Tag.create(["slack", "rls"])
  berlin = Tag.create(["city", "Berlin"])
  fanland = Tag.create(["company", "Fanland"])

  slack = Tag.create(["company", "Slack"])
  sf = Tag.create(["city", "San Francisco"])

  tartine = Tag.create(["company", "shop", "bakery", "Tartine"])
  paxton = Tag.create(["shop", "exotic", "Paxton Gate"])

  fp = Tag.create(["programming", "functional"])
  barf = Tag.create(["company", "Protenus"])

  sorted = List.sortBy(Tag.compareTag, [rls, berlin, fanland, slack, fp, sf, tartine, paxton])
  IO.pTrace("SORTED", sorted)

  pipe(
    map(Tag.overlap(slack)),
    IO.pTrace("overlappies with company:Slack"),
  )([rls, berlin, fanland, fp, sf, tartine, paxton, barf])
  pipe(
    CopyEdit.distance($, "dippy"),
    IO.pTrace("yo"),
  )("skippy")

  pipe(
    Tag.contains(tartine),
    IO.pTrace("tartine cool?!"),
  )(Tag.create(["cool", "company", "shop", "bakery", "Tartine"]))


  pipe(
    Tag.isLeftConnected($, Tag.create(["c", "d", "e"])),
    IO.pTrace("ABC x CDE"),
  )(Tag.create(["a", "b", "c"]))

  pipe(
    Tag.contains(Tag.create(["cool", "company", "shop", "bakery", "Tartine"])),
    IO.pTrace("tartine no cool?!"),
  )(tartine)

  pipe(
    Tag.contiguousOverlap($, Tag.create(["c", "d", "e"])),
    IO.pTrace("contiguous overlap"),
  )(Tag.create(["a", "b", "c", "d"]))
  pipe(
    Tag.contiguousOverlap($, Tag.create(String.split("", "abcde"))),
    IO.pTrace("contiguous overlap"),
  )(Tag.create(String.split("", "cdef")))

  pipe(
    Tag.connect(Tag.create(["alpha", "beta", "gamma"])),
    IO.pTrace("check!"),
  )(Tag.create(["beta", "gamma", "delta", "epsilon", "zeta"]))

  pipe(
    R.vaguelyAcquaint(brekk),
    IO.pTrace("Some people know some people?"),
    R.relateFrom,
    P.concretePlace,
    (x) => "The relationship arose from: " ++ x,
    IO.pTrace("output"),
  )(angelo)
}
